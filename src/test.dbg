mc: 18:05 4.7.2019. Compiling test.mc in debug mode.

The input program is:

int main()
{
  int a;
  int b;
  a = 1;
  b = 2;
  return
    +(a, b)
}

Type environment is:
% : int * int -> int
* : int * int -> int
** : int * int -> int
+ : int * int -> int
- : int * int -> int
/ : int * int -> int
< : int * int -> bool
<= : int * int -> bool
<> : int * int -> bool
== : int * int -> bool
> : int * int -> bool
>= : int * int -> bool
main :  -> int
not : bool -> bool

The program is well-typed.


After the naming phase:

int main()
{
  int a;
  int b;
  a = 1;
  b = 2;
  return
    let 
        x0 : int = a
        x1 : int = b
        x2 : int = +(x0, x1)
    in
      x2
}

After the lifting phase:

int main()
{
  int a;
  int b;
  a = 1;
  b = 2;
  return
    let 
        x0 : int = a
        x1 : int = b
        x2 : int = +(x0, x1)
    in
      x2
}

After the copyprop phase:

int main()
{
  int a;
  int b;
  a = 1;
  b = 2;
  return
    let 
        x2 : int = +(a, b)
    in
      x2
}

After the control phase:

main:	()
	a = 0
	b = 0
	a = 1
	b = 2
	x2 = a + b
	x3 = x2
	return x3

After the WASM phase:

(module
	(func $main (result i32) (local $a i32) (local $b i32) (local $x2 i32) (local $x3 i32) 
		i32.const 0
		set_local $a
		i32.const 0
		set_local $b
		i32.const 1
		set_local $a
		i32.const 2
		set_local $b
		get_local $a
		get_local $b
		i32.add
		set_local $x2
		get_local $x2
		set_local $x3
		get_local $x3
	)
	(export "main" (func $main))
)

CG environment for main is:
a : -3
b : -4
x2 : -5
x3 : -6

Emitting MIPS assembley code to test.asm


